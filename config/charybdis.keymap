#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
    require-prior-idle-ms = <50>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <0>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        SpaceTabEsc {
            bindings = <&kp ESCAPE>;
            key-positions = <32 33>;    // SPACE and TAB keys
            layers = <0>;
        };
    };

    behaviors {
        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <34>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

     QWERTY {
            bindings = <
  &kp Q           &kp W           &kp E               &kp R             &kp T        &kp Y        &kp U             &kp I               &kp O           &kp P
  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SQT
  &kp Z           &kp X           &kp C               &kp V             &kp B        &kp N        &kp M             &kp COMMA           &kp DOT         &kp SLASH
                                                      &lt 1 SPACE       &lt 2 TAB    &lt 3 ENTER  &lt 4 BACKSPACE
            >;
        };

        NAV {
            bindings = <
  &none         &none         &none             &none           &none    &kp LC(LS(Z))  &kp LC(V)      &kp LC(C)      &kp LC(X)    &kp LC(Z)
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none    &mkp MB3       &kp LEFT        &kp DOWN       &kp UP       &kp RIGHT
  &none         &none         &none             &none           &mo 5    &mkp MB4       &mkp LCLK       &mkp RCLK       &mkp MB5      &none
                                                &none           &none    &mkp RCLK      &mkp LCLK
            >;
        };

        MOUSE {
            bindings = <
  &none         &none         &none             &none           &none    &kp LC(LS(Z))  &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none    &mkp MB3       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW
  &none         &none         &none             &none           &mo 5    &mkp MB4       &mkp LCLK       &mkp RCLK       &mkp MB5      &none
                                                &none           &none    &mkp RCLK      &mkp LCLK
            >;
        };

        MEDIA {
            bindings = <
  &kp F1        &kp F2        &kp F3            &kp F4          &kp F5   &none         &none         &none         &none         &none
  &kp F6        &kp F7        &kp F8            &kp F9          &kp F10  &bt BT_CLR    &none         &none         &none         &bt BT_CLR_ALL
  &kp F11       &kp F12       &none             &none           &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                                &none           &none    &none         &none
            >;
        };

        NUM {
            bindings = <
  &kp LEFT_BRACKET  &kp N7        &kp N8        &kp N9        &kp RIGHT_BRACKET    &none  &none           &none             &none         &none
  &kp SEMICOLON     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL            &none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI
  &kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH        &none  &none           &none             &none         &none
                                                &kp N0        &kp MINUS            &none  &none
            >;
        };

        SCROLL {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans    &trans  &trans
            >;
        };
    };
};
